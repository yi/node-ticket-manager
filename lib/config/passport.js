// Generated by CoffeeScript 1.7.1
(function() {
  var FacebookStrategy, GitHubStrategy, GoogleStrategy, LocalStrategy, TwitterStrategy, User, mongoose;

  mongoose = require('mongoose');

  LocalStrategy = require('passport-local').Strategy;

  TwitterStrategy = require('passport-twitter').Strategy;

  FacebookStrategy = require('passport-facebook').Strategy;

  GitHubStrategy = require('passport-github').Strategy;

  GoogleStrategy = require('passport-google-oauth').OAuth2Strategy;

  User = mongoose.model('User');

  module.exports = function(passport, config) {
    var facebookStrategyCallback, facebookStrategyConfig, gitHubStrategyCallback, gitHubStrategyConfig, googleStrategyCallback, googleStrategyConfig, localStrategyCallback, localStrategyConfig, twitterStrategyCallback, twitterStrategyConfig;
    passport.serializeUser(function(user, done) {
      return done(null, user.id);
    });
    passport.deserializeUser(function(id, done) {
      return User.findOne({
        _id: id
      }, function(err, user) {
        return done(err, user);
      });
    });
    localStrategyConfig = {
      usernameField: 'email',
      passwordField: 'password'
    };
    localStrategyCallback = function(email, password, done) {
      User.findOne({
        email: email
      }, function(err, user) {
        if (err) {
          return done(err);
        }
        if (!user) {
          return done(null, false, {
            message: 'Unknown user'
          });
        }
        if (!user.authenticate(password)) {
          return done(null, false, {
            message: 'Invalid password'
          });
        }
        return done(null, user);
      });
    };
    passport.use(new LocalStrategy(localStrategyConfig, localStrategyCallback));
    twitterStrategyConfig = {
      consumerKey: config.twitter.clientID,
      consumerSecret: config.twitter.clientSecret,
      callbackURL: config.twitter.callbackURL
    };
    twitterStrategyCallback = function(token, tokenSecret, profile, done) {
      User.findOne({
        'twitter.id': profile.id
      }, function(err, user) {
        if (err) {
          return done(err);
        }
        if (!user) {
          user = new User({
            name: profile.displayName,
            username: profile.username,
            provider: 'twitter',
            twitter: profile._json
          });
          user.save(function(err) {
            if (err != null) {
              console.log(err);
            }
            return done(err, user);
          });
        } else {
          return done(err, user);
        }
      });
    };
    passport.use(new TwitterStrategy(twitterStrategyConfig, twitterStrategyCallback));
    facebookStrategyConfig = {
      clientID: config.facebook.clientID,
      clientSecret: config.facebook.clientSecret,
      callbackURL: config.facebook.callbackURL
    };
    facebookStrategyCallback = function(accessToken, refreshToken, profile, done) {
      User.findOne({
        'facebook.id': profile.id
      }, function(err, user) {
        if (err) {
          return done(err);
        }
        if (!user) {
          user = new User({
            name: profile.displayName,
            email: profile.emails[0].value,
            username: profile.username,
            provider: 'facebook',
            facebook: profile._json
          });
          user.save(function(err) {
            if (err != null) {
              console.log(err);
            }
            return done(err, user);
          });
        } else {
          return done(err, user);
        }
      });
    };
    passport.use(new FacebookStrategy(facebookStrategyConfig, facebookStrategyCallback));
    gitHubStrategyConfig = {
      clientID: config.github.clientID,
      clientSecret: config.github.clientSecret,
      callbackURL: config.github.callbackUR
    };
    gitHubStrategyCallback = function(accessToken, refreshToken, profile, done) {
      User.findOne({
        'github.id': profile.id
      }, function(err, user) {
        if (err) {
          return done(err);
        }
        if (!user) {
          user = new User({
            name: profile.displayName,
            email: profile.emails[0].value,
            username: profile.username,
            provider: 'github',
            github: profile._json
          });
          user.save(function(err) {
            if (err != null) {
              console.log(err);
            }
            return done(err, user);
          });
        } else {
          return done(err, user);
        }
      });
    };
    passport.use(new GitHubStrategy(gitHubStrategyConfig, gitHubStrategyCallback));
    googleStrategyConfig = {
      clientID: config.google.clientID,
      clientSecret: config.google.clientSecret,
      callbackURL: config.google.callbackURL
    };
    googleStrategyCallback = function(accessToken, refreshToken, profile, done) {
      User.findOne({
        'google.id': profile.id
      }, function(err, user) {
        var new_profile;
        if (!user) {
          new_profile = {};
          new_profile.id = profile.id;
          new_profile.displayName = profile.displayName;
          new_profile.emails = profile.emails;
          user = new User({
            name: profile.displayName,
            email: profile.emails[0].value,
            username: profile.username,
            provider: 'google',
            google: new_profile._json
          });
          user.save(function(err) {
            if (err != null) {
              console.log(err);
            }
            return done(err, user);
          });
        } else {
          return done(err, user);
        }
      });
    };
    return passport.use(new GoogleStrategy(googleStrategyConfig, googleStrategyCallback));
  };

}).call(this);
