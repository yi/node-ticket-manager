// Generated by CoffeeScript 1.7.1
(function() {
  var MAX_LENGTH_OF_DESC, MAX_LENGTH_OF_NAME, Schema, WorkerSchema, genUUID, mongoose, paginator, schemaStructure, timestamps, trashable, _;

  mongoose = require("mongoose");

  Schema = mongoose.Schema;

  _ = require('underscore');

  timestamps = require("mongoose-times");

  paginator = require('mongoose-paginator');

  trashable = require('mongoose-trashable');

  schemaStructure = {
    name: String,
    desc: String,
    count_success: {
      type: Number,
      "default": 0
    },
    count_failure: {
      type: Number,
      "default": 0
    },
    consumer_secret: String
  };

  genUUID = function(a) {
    if (a) {
      return (0 | Math.random() * 16).toString(16);
    } else {
      return ("" + 1e7 + -1e3 + -4e3 + -8e3 + -1e11).replace(/1|0/g, genUUID);
    }
  };

  MAX_LENGTH_OF_NAME = 50;

  MAX_LENGTH_OF_DESC = 200;

  WorkerSchema = new Schema(schemaStructure);

  WorkerSchema.plugin(trashable);

  WorkerSchema.plugin(timestamps, {
    created: "created_at",
    lastUpdated: "updated_at"
  });

  WorkerSchema.path('name').validate(function(val) {
    return val.length;
  }, 'Name cannot be blank');

  WorkerSchema.path('desc').validate(function(val) {
    return val.length;
  }, 'Desc cannot be blank');

  WorkerSchema.plugin(paginator, {
    limit: 10,
    defaultKey: '_id',
    direction: -1
  });

  WorkerSchema.pre('save', function(next) {
    if (!this.isNew) {
      return next();
    }
    this.name = this.name.trim().replace(/\s/g, '').toLowerCase().substr(0, MAX_LENGTH_OF_NAME);
    this.desc = this.desc.trim().substr(0, MAX_LENGTH_OF_DESC);
    mongoose.model('Worker').findOne({
      name: this.name
    }, (function(_this) {
      return function(err, worker) {
        if (err != null) {
          return next(err);
        }
        if (worker != null) {
          return next(new Error("worker " + _this.name + " already exist"));
        }
        _this.consumer_secret = genUUID();
        next();
      };
    })(this));
  });

  mongoose.model('Worker', WorkerSchema);

}).call(this);
